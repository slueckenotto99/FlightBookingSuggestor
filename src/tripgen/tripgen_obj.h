/*

    Trip Itinerary Generation Object Header File

*/

#ifndef __TRIPGEN_OBJ__
#define __TRIPGEN_OBJ__

#include <string>
#include <vector>

using namespace std;

#define ARR 0
#define DEP 1

struct destination_config_t
{
    char    is_initial_cond;                ///< Flag, signifies object is the initial start OR end of trip
    char    is_starting_point;              ///< Flag, signifies object is the initial starting point of trip
    char    is_intermediate;                ///< Flag, signifies object is an intermediate destination (i.e., not start or end of trip)

    string  airport_icao;                   ///< 4-Letter/number airport ICAO identifier
    string  arrive_date;                    ///< MM-DD-YYYY, date of entry/arrival into location
    string  depart_date;                    ///< MM-DD-YYYY, date of exit/departure out of location

    int     year_offset[2];                 ///< Derived year offset from current date (e.g., 1 = 1 YEAR FROM TODAY) [0 - ARR, 1 - DEP]
    int     day_offset[2];                  ///< Derived day offset from current date (e.g., 1 = TOMORROW) [0 - ARR, 1 - DEP]
    
};

struct tripgen_conf_t
{
    int     days_between_stops;             ///< Minimum number of days between flights
};

struct tripgen_inputs_t
{
    vector<destination_config_t>    locations;       ///< Vector of locations gathered from user inputs
    tripgen_conf_t                  cfg;        ///< Tripgen class configuration inputs

};

struct tripgen_outputs_t
{
    vector<string>  itineraries;            ///< Output vector of possible itineraries generated by tripgen methods
};

class tripgen_obj_t
{
    public:
        tripgen_inputs_t    in;             ///< Input tripgenerator structure
        tripgen_outputs_t   out;            ///< Output tripgenerator structure

        void    inputs( tripgen_inputs_t &inp);     ///< Function to pass user inputs to private class members
        void    outputs( void );            ///< Function to populate publicly accessible class output struct
        void    oneway_gen( void );         ///< Generates possible trips only utilizing one-way flights
        void    roundtrip_gen( void );      ///< Generates possible trips only utilizing roundtrip flights
        void    combo_gen( void );          ///< Generates possible trips utlizing a combination od one-way and rountrip flights
        void    init( void );               ///< Class initialization method
        void    close( void );              ///< Class closure method

    protected:


    private:
        vector<destination_config_t> locations;  ///< Vector of locations gathered from user inputs
        vector<string> itineraries;         ///< Vector of possible itineraries generated by tripgen methods
        destination_config_t start_loc;     ///< Starting location for every trip
        destination_config_t end_loc;       ///< Ending location for every trip


};

#endif